<?php
/**
 * Bulletin.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://k62.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace RK\BulletinModule\Form\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\ExtensionsModule\Api\VariableApi;

/**
 * Configuration form type base class.
 */
abstract class AbstractAppSettingsType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var VariableApi
     */
    protected $variableApi;

    /**
     * @var array
     */
    protected $modVars;

    /**
     * AppSettingsType constructor.
     *
     * @param TranslatorInterface  $translator  Translator service instance
     * @param VariableApi          $variableApi VariableApi service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        VariableApi $variableApi
    ) {
        $this->setTranslator($translator);
        $this->variableApi = $variableApi;
        $this->modVars = $this->variableApi->getAll('RKBulletinModule');
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addBulletinFields($builder, $options);
        $this->addListViewsFields($builder, $options);
        $this->addImagesFields($builder, $options);
        $this->addIntegrationFields($builder, $options);

        $builder
            ->add('save', 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
                'label' => $this->__('Update configuration'),
                'icon' => 'fa-check',
                'attr' => [
                    'class' => 'btn btn-success'
                ]
            ])
            ->add('cancel', 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
                'label' => $this->__('Cancel'),
                'icon' => 'fa-times',
                'attr' => [
                    'class' => 'btn btn-default',
                    'formnovalidate' => 'formnovalidate'
                ]
            ])
        ;
    }

    /**
     * Adds fields for bulletin fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addBulletinFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('teaserLength', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Teaser length') . ':',
                'required' => false,
                'data' => isset($this->modVars['teaserLength']) ? $this->modVars['teaserLength'] : '',
                'empty_data' => intval('5000'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the teaser length.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('teaserDisplayLength', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Teaser display length') . ':',
                'required' => false,
                'data' => isset($this->modVars['teaserDisplayLength']) ? $this->modVars['teaserDisplayLength'] : '',
                'empty_data' => intval('250'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the teaser display length.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('descriptionLength', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Description length') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('for description and event description')
                ],
                'help' => $this->__('for description and event description'),
                'required' => false,
                'data' => isset($this->modVars['descriptionLength']) ? $this->modVars['descriptionLength'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the description length.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('showCounter', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Show counter') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('show counter in notice display')
                ],
                'help' => $this->__('show counter in notice display'),
                'required' => false,
                'data' => (bool)(isset($this->modVars['showCounter']) ? $this->modVars['showCounter'] : true),
                'attr' => [
                    'title' => $this->__('The show counter option.')
                ],
            ])
        ;
    }

    /**
     * Adds fields for list views fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('noticeEntriesPerPage', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Notice entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of notices shown per page')
                ],
                'help' => $this->__('The amount of notices shown per page'),
                'required' => false,
                'data' => isset($this->modVars['noticeEntriesPerPage']) ? $this->modVars['noticeEntriesPerPage'] : '',
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the notice entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnNoticesOnAccountPage', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Link own notices on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to notices of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to notices of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->modVars['linkOwnNoticesOnAccountPage']) ? $this->modVars['linkOwnNoticesOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own notices on account page option.')
                ],
            ])
            ->add('pictureEntriesPerPage', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Picture entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of pictures shown per page')
                ],
                'help' => $this->__('The amount of pictures shown per page'),
                'required' => false,
                'data' => isset($this->modVars['pictureEntriesPerPage']) ? $this->modVars['pictureEntriesPerPage'] : '',
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the picture entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnPicturesOnAccountPage', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Link own pictures on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to pictures of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to pictures of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->modVars['linkOwnPicturesOnAccountPage']) ? $this->modVars['linkOwnPicturesOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own pictures on account page option.')
                ],
            ])
            ->add('eventEntriesPerPage', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Event entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of events shown per page')
                ],
                'help' => $this->__('The amount of events shown per page'),
                'required' => false,
                'data' => isset($this->modVars['eventEntriesPerPage']) ? $this->modVars['eventEntriesPerPage'] : '',
                'empty_data' => intval('10'),
                'attr' => [
                    'maxlength' => 255,
                    'title' => $this->__('Enter the event entries per page.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0
            ])
            ->add('linkOwnEventsOnAccountPage', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Link own events on account page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to add a link to events of the current user on his account page')
                ],
                'help' => $this->__('Whether to add a link to events of the current user on his account page'),
                'required' => false,
                'data' => (bool)(isset($this->modVars['linkOwnEventsOnAccountPage']) ? $this->modVars['linkOwnEventsOnAccountPage'] : true),
                'attr' => [
                    'title' => $this->__('The link own events on account page option.')
                ],
            ])
        ;
    }

    /**
     * Adds fields for images fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addImagesFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('enableShrinkingForNoticeImage', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Enable shrinking') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.')
                ],
                'help' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.'),
                'required' => false,
                'data' => (bool)(isset($this->modVars['enableShrinkingForNoticeImage']) ? $this->modVars['enableShrinkingForNoticeImage'] : false),
                'attr' => [
                    'title' => $this->__('The enable shrinking option.'),
                    'class' => 'shrink-enabler'
                ],
            ])
            ->add('shrinkWidthNoticeImage', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Shrink width') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The maximum image width in pixels.')
                ],
                'help' => $this->__('The maximum image width in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['shrinkWidthNoticeImage']) ? $this->modVars['shrinkWidthNoticeImage'] : '',
                'empty_data' => intval('800'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the shrink width.') . ' ' . $this->__('Only digits are allowed.'),
                    'class' => 'shrinkdimension-shrinkwidthnoticeimage'
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('shrinkHeightNoticeImage', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Shrink height') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The maximum image height in pixels.')
                ],
                'help' => $this->__('The maximum image height in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['shrinkHeightNoticeImage']) ? $this->modVars['shrinkHeightNoticeImage'] : '',
                'empty_data' => intval('600'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the shrink height.') . ' ' . $this->__('Only digits are allowed.'),
                    'class' => 'shrinkdimension-shrinkheightnoticeimage'
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailModeNoticeImage', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Thumbnail mode') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail mode (inset or outbound).')
                ],
                'help' => $this->__('Thumbnail mode (inset or outbound).'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailModeNoticeImage']) ? $this->modVars['thumbnailModeNoticeImage'] : '',
                'empty_data' => 'inset',
                'attr' => [
                    'title' => $this->__('Choose the thumbnail mode.')
                ],'choices' => [
                    $this->__('Inset') => 'inset'
                    ,$this->__('Outbound') => 'outbound'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
            ->add('thumbnailWidthNoticeImageView', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail width view') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail width on view pages in pixels.')
                ],
                'help' => $this->__('Thumbnail width on view pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailWidthNoticeImageView']) ? $this->modVars['thumbnailWidthNoticeImageView'] : '',
                'empty_data' => intval('32'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the thumbnail width view.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailHeightNoticeImageView', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail height view') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail height on view pages in pixels.')
                ],
                'help' => $this->__('Thumbnail height on view pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailHeightNoticeImageView']) ? $this->modVars['thumbnailHeightNoticeImageView'] : '',
                'empty_data' => intval('24'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the thumbnail height view.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailWidthNoticeImageDisplay', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail width display') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail width on display pages in pixels.')
                ],
                'help' => $this->__('Thumbnail width on display pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailWidthNoticeImageDisplay']) ? $this->modVars['thumbnailWidthNoticeImageDisplay'] : '',
                'empty_data' => intval('240'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the thumbnail width display.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailHeightNoticeImageDisplay', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail height display') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail height on display pages in pixels.')
                ],
                'help' => $this->__('Thumbnail height on display pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailHeightNoticeImageDisplay']) ? $this->modVars['thumbnailHeightNoticeImageDisplay'] : '',
                'empty_data' => intval('180'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the thumbnail height display.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailWidthNoticeImageEdit', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail width edit') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail width on edit pages in pixels.')
                ],
                'help' => $this->__('Thumbnail width on edit pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailWidthNoticeImageEdit']) ? $this->modVars['thumbnailWidthNoticeImageEdit'] : '',
                'empty_data' => intval('240'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the thumbnail width edit.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailHeightNoticeImageEdit', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail height edit') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail height on edit pages in pixels.')
                ],
                'help' => $this->__('Thumbnail height on edit pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailHeightNoticeImageEdit']) ? $this->modVars['thumbnailHeightNoticeImageEdit'] : '',
                'empty_data' => intval('180'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the thumbnail height edit.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('enableShrinkingForPictureImage', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Enable shrinking') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.')
                ],
                'help' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.'),
                'required' => false,
                'data' => (bool)(isset($this->modVars['enableShrinkingForPictureImage']) ? $this->modVars['enableShrinkingForPictureImage'] : false),
                'attr' => [
                    'title' => $this->__('The enable shrinking option.'),
                    'class' => 'shrink-enabler'
                ],
            ])
            ->add('shrinkWidthPictureImage', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Shrink width') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The maximum image width in pixels.')
                ],
                'help' => $this->__('The maximum image width in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['shrinkWidthPictureImage']) ? $this->modVars['shrinkWidthPictureImage'] : '',
                'empty_data' => intval('800'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the shrink width.') . ' ' . $this->__('Only digits are allowed.'),
                    'class' => 'shrinkdimension-shrinkwidthpictureimage'
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('shrinkHeightPictureImage', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Shrink height') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The maximum image height in pixels.')
                ],
                'help' => $this->__('The maximum image height in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['shrinkHeightPictureImage']) ? $this->modVars['shrinkHeightPictureImage'] : '',
                'empty_data' => intval('600'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the shrink height.') . ' ' . $this->__('Only digits are allowed.'),
                    'class' => 'shrinkdimension-shrinkheightpictureimage'
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailModePictureImage', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Thumbnail mode') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail mode (inset or outbound).')
                ],
                'help' => $this->__('Thumbnail mode (inset or outbound).'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailModePictureImage']) ? $this->modVars['thumbnailModePictureImage'] : '',
                'empty_data' => 'inset',
                'attr' => [
                    'title' => $this->__('Choose the thumbnail mode.')
                ],'choices' => [
                    $this->__('Inset') => 'inset'
                    ,$this->__('Outbound') => 'outbound'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
            ->add('thumbnailWidthPictureImageView', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail width view') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail width on view pages in pixels.')
                ],
                'help' => $this->__('Thumbnail width on view pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailWidthPictureImageView']) ? $this->modVars['thumbnailWidthPictureImageView'] : '',
                'empty_data' => intval('32'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the thumbnail width view.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailHeightPictureImageView', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail height view') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail height on view pages in pixels.')
                ],
                'help' => $this->__('Thumbnail height on view pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailHeightPictureImageView']) ? $this->modVars['thumbnailHeightPictureImageView'] : '',
                'empty_data' => intval('24'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the thumbnail height view.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailWidthPictureImageDisplay', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail width display') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail width on display pages in pixels.')
                ],
                'help' => $this->__('Thumbnail width on display pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailWidthPictureImageDisplay']) ? $this->modVars['thumbnailWidthPictureImageDisplay'] : '',
                'empty_data' => intval('240'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the thumbnail width display.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailHeightPictureImageDisplay', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail height display') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail height on display pages in pixels.')
                ],
                'help' => $this->__('Thumbnail height on display pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailHeightPictureImageDisplay']) ? $this->modVars['thumbnailHeightPictureImageDisplay'] : '',
                'empty_data' => intval('180'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the thumbnail height display.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailWidthPictureImageEdit', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail width edit') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail width on edit pages in pixels.')
                ],
                'help' => $this->__('Thumbnail width on edit pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailWidthPictureImageEdit']) ? $this->modVars['thumbnailWidthPictureImageEdit'] : '',
                'empty_data' => intval('240'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the thumbnail width edit.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailHeightPictureImageEdit', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail height edit') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail height on edit pages in pixels.')
                ],
                'help' => $this->__('Thumbnail height on edit pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailHeightPictureImageEdit']) ? $this->modVars['thumbnailHeightPictureImageEdit'] : '',
                'empty_data' => intval('180'),
                'attr' => [
                    'maxlength' => 4,
                    'title' => $this->__('Enter the thumbnail height edit.') . ' ' . $this->__('Only digits are allowed.')
                ],'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
        ;
    }

    /**
     * Adds fields for integration fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addIntegrationFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('enabledFinderTypes', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Enabled finder types') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).')
                ],
                'help' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).'),
                'required' => false,
                'data' => isset($this->modVars['enabledFinderTypes']) ? $this->modVars['enabledFinderTypes'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the enabled finder types.')
                ],'choices' => [
                    $this->__('Notice') => 'notice'
                    ,$this->__('Picture') => 'picture'
                    ,$this->__('Event') => 'event'
                ],
                'choices_as_values' => true,
                'multiple' => true
            ])
        ;
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'rkbulletinmodule_appsettings';
    }
}

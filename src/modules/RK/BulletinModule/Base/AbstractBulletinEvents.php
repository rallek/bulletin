<?php
/**
 * Bulletin.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://k62.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace RK\BulletinModule\Base;

/**
 * Events definition base class.
 */
abstract class AbstractBulletinEvents
{
    /**
     * The rkbulletinmodule.notice_post_load event is thrown when notices
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterNoticeEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const NOTICE_POST_LOAD = 'rkbulletinmodule.notice_post_load';
    
    /**
     * The rkbulletinmodule.notice_pre_persist event is thrown before a new notice
     * is created in the system.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterNoticeEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const NOTICE_PRE_PERSIST = 'rkbulletinmodule.notice_pre_persist';
    
    /**
     * The rkbulletinmodule.notice_post_persist event is thrown after a new notice
     * has been created in the system.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterNoticeEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const NOTICE_POST_PERSIST = 'rkbulletinmodule.notice_post_persist';
    
    /**
     * The rkbulletinmodule.notice_pre_remove event is thrown before an existing notice
     * is removed from the system.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterNoticeEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const NOTICE_PRE_REMOVE = 'rkbulletinmodule.notice_pre_remove';
    
    /**
     * The rkbulletinmodule.notice_post_remove event is thrown after an existing notice
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterNoticeEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const NOTICE_POST_REMOVE = 'rkbulletinmodule.notice_post_remove';
    
    /**
     * The rkbulletinmodule.notice_pre_update event is thrown before an existing notice
     * is updated in the system.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterNoticeEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const NOTICE_PRE_UPDATE = 'rkbulletinmodule.notice_pre_update';
    
    /**
     * The rkbulletinmodule.notice_post_update event is thrown after an existing new notice
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterNoticeEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const NOTICE_POST_UPDATE = 'rkbulletinmodule.notice_post_update';
    
    /**
     * The rkbulletinmodule.image_post_load event is thrown when images
     * are loaded from the database.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterImageEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::postLoad()
     * @var string
     */
    const IMAGE_POST_LOAD = 'rkbulletinmodule.image_post_load';
    
    /**
     * The rkbulletinmodule.image_pre_persist event is thrown before a new image
     * is created in the system.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterImageEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::prePersist()
     * @var string
     */
    const IMAGE_PRE_PERSIST = 'rkbulletinmodule.image_pre_persist';
    
    /**
     * The rkbulletinmodule.image_post_persist event is thrown after a new image
     * has been created in the system.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterImageEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::postPersist()
     * @var string
     */
    const IMAGE_POST_PERSIST = 'rkbulletinmodule.image_post_persist';
    
    /**
     * The rkbulletinmodule.image_pre_remove event is thrown before an existing image
     * is removed from the system.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterImageEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::preRemove()
     * @var string
     */
    const IMAGE_PRE_REMOVE = 'rkbulletinmodule.image_pre_remove';
    
    /**
     * The rkbulletinmodule.image_post_remove event is thrown after an existing image
     * has been removed from the system.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterImageEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::postRemove()
     * @var string
     */
    const IMAGE_POST_REMOVE = 'rkbulletinmodule.image_post_remove';
    
    /**
     * The rkbulletinmodule.image_pre_update event is thrown before an existing image
     * is updated in the system.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterImageEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::preUpdate()
     * @var string
     */
    const IMAGE_PRE_UPDATE = 'rkbulletinmodule.image_pre_update';
    
    /**
     * The rkbulletinmodule.image_post_update event is thrown after an existing new image
     * has been updated in the system.
     *
     * The event listener receives an
     * RK\BulletinModule\Event\FilterImageEvent instance.
     *
     * @see RK\BulletinModule\Listener\EntityLifecycleListener::postUpdate()
     * @var string
     */
    const IMAGE_POST_UPDATE = 'rkbulletinmodule.image_post_update';
    
}

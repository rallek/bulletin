<?php
/**
 * Bulletin.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://k62.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace RK\BulletinModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Gedmo\Translatable\Translatable;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use RK\BulletinModule\Traits\EntityWorkflowTrait;
use RK\BulletinModule\Traits\StandardFieldsTrait;
use RK\BulletinModule\Validator\Constraints as BulletinAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for notice entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class AbstractNoticeEntity extends EntityAccess implements Translatable
{
    /**
     * Hook entity workflow field and behaviour.
     */
    use EntityWorkflowTrait;

    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'notice';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @BulletinAssert\ListEntry(entityName="notice", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $title
     */
    protected $title = '';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=5000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="5000")
     * @var text $teaser
     */
    protected $teaser = '';
    
    /**
     * @Gedmo\Translatable
     * @ORM\Column(type="text", length=5000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="5000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * Image meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $imageMeta
     */
    protected $imageMeta = [];
    
    /**
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var string $image
     */
    protected $image = null;
    
    /**
     * Full image path as url.
     *
     * @Assert\Type(type="string")
     * @var string $imageUrl
     */
    protected $imageUrl = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $copyright
     */
    protected $copyright = '';
    
    /**
     * @ORM\Column(type="datetime")
     * @Assert\NotNull()
     * @Assert\DateTime()
     * @var DateTime $startDate
     */
    protected $startDate;
    
    /**
     * @ORM\Column(type="datetime")
     * @Assert\NotNull()
     * @Assert\DateTime()
     * @Assert\Expression("value > this.getStartDate()")
     * @var DateTime $endDate
     */
    protected $endDate;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $startPage
     */
    protected $startPage = true;
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $counter
     */
    protected $counter = 0;
    
    
    /**
     * Used locale to override Translation listener's locale.
     * this is not a mapped field of entity metadata, just a simple property.
     *
     * @Assert\Locale()
     * @Gedmo\Locale
     * @var string $locale
     */
    protected $locale;
    
    /**
     * @ORM\OneToMany(targetEntity="\RK\BulletinModule\Entity\NoticeCategoryEntity", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true)
     * @var \RK\BulletinModule\Entity\NoticeCategoryEntity
     */
    protected $categories = null;
    
    /**
     * Bidirectional - One notice [notice] has many pictures [pictures] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="RK\BulletinModule\Entity\PictureEntity", mappedBy="notice")
     * @ORM\JoinTable(name="rk_bull_noticepictures")
     * @var \RK\BulletinModule\Entity\PictureEntity[] $pictures
     */
    protected $pictures = null;
    
    /**
     * Bidirectional - One notice [notice] has one event [event] (INVERSE SIDE).
     *
     * @ORM\OneToOne(targetEntity="RK\BulletinModule\Entity\EventEntity", mappedBy="notice")
     * @ORM\JoinTable(name="rk_bull_event")
     * @Assert\Type(type="RK\BulletinModule\Entity\EventEntity")
     * @var \RK\BulletinModule\Entity\EventEntity $event
     */
    protected $event;
    
    
    /**
     * NoticeEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->startDate = \DateTime::createFromFormat('Y-m-d H:i:s', date('Y-m-d H:i:s'));
        $this->endDate = \DateTime::createFromFormat('Y-m-d H:i:s', '2099-12-31 00:00:00');
        $this->initWorkflow();
        $this->pictures = new ArrayCollection();
        $this->categories = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        $this->id = intval($id);
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        $this->workflowState = isset($workflowState) ? $workflowState : '';
    }
    
    /**
     * Returns the title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Sets the title.
     *
     * @param string $title
     *
     * @return void
     */
    public function setTitle($title)
    {
        $this->title = isset($title) ? $title : '';
    }
    
    /**
     * Returns the teaser.
     *
     * @return text
     */
    public function getTeaser()
    {
        return $this->teaser;
    }
    
    /**
     * Sets the teaser.
     *
     * @param text $teaser
     *
     * @return void
     */
    public function setTeaser($teaser)
    {
        $this->teaser = isset($teaser) ? $teaser : '';
    }
    
    /**
     * Returns the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        $this->description = isset($description) ? $description : '';
    }
    
    /**
     * Returns the image.
     *
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }
    
    /**
     * Sets the image.
     *
     * @param string $image
     *
     * @return void
     */
    public function setImage($image)
    {
        $this->image = $image;
    }
    
    /**
     * Returns the image url.
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->imageUrl;
    }
    
    /**
     * Sets the image url.
     *
     * @param string $imageUrl
     *
     * @return void
     */
    public function setImageUrl($imageUrl)
    {
        $this->imageUrl = $imageUrl;
    }
    
    /**
     * Returns the image meta.
     *
     * @return array
     */
    public function getImageMeta()
    {
        return $this->imageMeta;
    }
    
    /**
     * Sets the image meta.
     *
     * @param array $imageMeta
     *
     * @return void
     */
    public function setImageMeta($imageMeta = [])
    {
        $this->imageMeta = $imageMeta;
    }
    
    /**
     * Returns the copyright.
     *
     * @return string
     */
    public function getCopyright()
    {
        return $this->copyright;
    }
    
    /**
     * Sets the copyright.
     *
     * @param string $copyright
     *
     * @return void
     */
    public function setCopyright($copyright)
    {
        $this->copyright = isset($copyright) ? $copyright : '';
    }
    
    /**
     * Returns the start date.
     *
     * @return DateTime
     */
    public function getStartDate()
    {
        return $this->startDate;
    }
    
    /**
     * Sets the start date.
     *
     * @param DateTime $startDate
     *
     * @return void
     */
    public function setStartDate($startDate)
    {
        if (is_object($startDate) && $startDate instanceOf \DateTime) {
            $this->startDate = $startDate;
        } else {
            $this->startDate = new \DateTime($startDate);
        }
    }
    
    /**
     * Returns the end date.
     *
     * @return DateTime
     */
    public function getEndDate()
    {
        return $this->endDate;
    }
    
    /**
     * Sets the end date.
     *
     * @param DateTime $endDate
     *
     * @return void
     */
    public function setEndDate($endDate)
    {
        if (is_object($endDate) && $endDate instanceOf \DateTime) {
            $this->endDate = $endDate;
        } else {
            $this->endDate = new \DateTime($endDate);
        }
    }
    
    /**
     * Returns the start page.
     *
     * @return boolean
     */
    public function getStartPage()
    {
        return $this->startPage;
    }
    
    /**
     * Sets the start page.
     *
     * @param boolean $startPage
     *
     * @return void
     */
    public function setStartPage($startPage)
    {
        if ($startPage !== $this->startPage) {
            $this->startPage = (bool)$startPage;
        }
    }
    
    /**
     * Returns the counter.
     *
     * @return integer
     */
    public function getCounter()
    {
        return $this->counter;
    }
    
    /**
     * Sets the counter.
     *
     * @param integer $counter
     *
     * @return void
     */
    public function setCounter($counter)
    {
        $this->counter = intval($counter);
    }
    
    /**
     * Returns the locale.
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->locale;
    }
    
    /**
     * Sets the locale.
     *
     * @param string $locale
     *
     * @return void
     */
    public function setLocale($locale)
    {
        $this->locale = $locale;
    }
    
    /**
     * Returns the categories.
     *
     * @return ArrayCollection[]
     */
    public function getCategories()
    {
        return $this->categories;
    }
    
    
    /**
     * Sets the categories.
     *
     * @param ArrayCollection $categories
     *
     * @return void
     */
    public function setCategories(ArrayCollection $categories)
    {
        foreach ($this->categories as $category) {
            if (false === $key = $this->collectionContains($categories, $category)) {
                $this->categories->removeElement($category);
            } else {
                $categories->remove($key);
            }
        }
        foreach ($categories as $category) {
            $this->categories->add($category);
        }
    }
    
    /**
     * Checks if a collection contains an element based only on two criteria (categoryRegistryId, category).
     *
     * @param ArrayCollection $collection
     * @param \RK\BulletinModule\Entity\NoticeCategoryEntity $element
     *
     * @return bool|int
     */
    private function collectionContains(ArrayCollection $collection, \RK\BulletinModule\Entity\NoticeCategoryEntity $element)
    {
        foreach ($collection as $key => $category) {
            /** @var \RK\BulletinModule\Entity\NoticeCategoryEntity $category */
            if ($category->getCategoryRegistryId() == $element->getCategoryRegistryId()
                && $category->getCategory() == $element->getCategory()
            ) {
                return $key;
            }
        }
    
        return false;
    }
    
    /**
     * Returns the pictures.
     *
     * @return \RK\BulletinModule\Entity\PictureEntity[]
     */
    public function getPictures()
    {
        return $this->pictures;
    }
    
    /**
     * Sets the pictures.
     *
     * @param \RK\BulletinModule\Entity\PictureEntity[] $pictures
     *
     * @return void
     */
    public function setPictures($pictures)
    {
        foreach ($pictures as $pictureSingle) {
            $this->addPictures($pictureSingle);
        }
    }
    
    /**
     * Adds an instance of \RK\BulletinModule\Entity\PictureEntity to the list of pictures.
     *
     * @param \RK\BulletinModule\Entity\PictureEntity $picture The instance to be added to the collection
     *
     * @return void
     */
    public function addPictures(\RK\BulletinModule\Entity\PictureEntity $picture)
    {
        $this->pictures->add($picture);
        $picture->setNotice($this);
    }
    
    /**
     * Removes an instance of \RK\BulletinModule\Entity\PictureEntity from the list of pictures.
     *
     * @param \RK\BulletinModule\Entity\PictureEntity $picture The instance to be removed from the collection
     *
     * @return void
     */
    public function removePictures(\RK\BulletinModule\Entity\PictureEntity $picture)
    {
        $this->pictures->removeElement($picture);
        $picture->setNotice(null);
    }
    
    /**
     * Returns the event.
     *
     * @return \RK\BulletinModule\Entity\EventEntity
     */
    public function getEvent()
    {
        return $this->event;
    }
    
    /**
     * Sets the event.
     *
     * @param \RK\BulletinModule\Entity\EventEntity $event
     *
     * @return void
     */
    public function setEvent($event = null)
    {
        $this->event = $event;
        $event->setNotice($this);
    }
    
    
    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     *
     * @return string The display title
     */
    public function getTitleFromDisplayPattern()
    {
        $formattedTitle = ''
                . $this->getTitle();
    
        return $formattedTitle;
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        $args = [];
    
        $args['id'] = $this['id'];
    
        if (property_exists($this, 'slug')) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'rkbulletinmodule.ui_hooks.notices';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Notice ' . $this->createCompositeIdentifier() . ': ' . $this->getTitleFromDisplayPattern();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!($this->id)) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifiers
        $this->setId(0);
    
        // reset workflow
        $this->resetWorkflow();
    
        // reset upload fields
        $this->setImage(null);
        $this->setImageMeta([]);
        $this->setImageUrl('');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    
        // clone categories
        $categories = $this->categories;
        $this->categories = new ArrayCollection();
        foreach ($categories as $c) {
            $newCat = clone $c;
            $this->categories->add($newCat);
            $newCat->setEntity($this);
        }
    }
}
